export class VulnerabilityUtils {
    DEFAULT_MSG_FOR_UNKNOWN_VUL: string = '';
    PAGE_SIZE: number = 5000;
    CLOSE_STATE: string = "3";
    DEFER_STATE: string = "12";
    AWAIT_IMPL: string = "10";
    INVALID_CI_SUBSTATE: number = 7;
    SOURCE: string = "ServiceNow VR";
    VulnerableSwDisMatchObj: any = null;
    SOLUTION_VENDOR_MAP: string[] = ['Microsoft', 'Red Hat'];

    constructor() {
        // Initialization code here
    }

    initialize(): void {
        // Stub for initialize method
    }

    isSAMNVDOn(): boolean {
        // Stub for isSAMNVDOn method
        return false;
    }

    getCIFilter(): string {
        // Stub for getCIFilter method
        return '';
    }

    getVulFilter(): string {
        // Stub for getVulFilter method
        return '';
    }

    createVulGroupFromFilter(filter: string): void {
        // Stub for createVulGroupFromFilter method
    }

    refreshVulnerableItemsforNVD(current: any): void {
        // Stub for refreshVulnerableItemsforNVD method
    }

    insertVulnerableItemForSAM(vulEntry: any, installationRecord: any): void {
        // Stub for insertVulnerableItemForSAM method
    }

    insertVulnerabilityVendorMappingData(vulID: string, scannerName: string, vendorName: string): void {
        // Stub for insertVulnerabilityVendorMappingData method
    }

    _checkAndInsertVendorMappings(vul: any, scannerName: string, vendorName: string): void {
        // Stub for _checkAndInsertVendorMappings method
    }

    _insertVulnerabilityVendorMappingData(vulID: string, vendorName: string): void {
        // Stub for _insertVulnerabilityVendorMappingData method
    }

    refreshVulnerableItems(current: any): void {
        // Stub for refreshVulnerableItems method
    }

    refreshAllVulnerableItemsWithSettings(current: any): void {
        // Stub for refreshAllVulnerableItemsWithSettings method
    }

    _refreshVulnerableItems(current: any): void {
        // Stub for _refreshVulnerableItems method
    }

    refreshVIAfterNVDImport(): void {
        // Stub for refreshVIAfterNVDImport method
    }

    insertVulnerableItems(installRecord: any): void {
        // Stub for insertVulnerableItems method
    }

    createVISoftwareExp(sysId: string): void {
        // Stub for createVISoftwareExp method
    }

    _getExposureViCount(softExp: any): number {
        // Stub for _getExposureViCount method
        return 0;
    }

    _createM2MExpVul(swExp: any, vulnEntry: any): void {
        // Stub for _createM2MExpVul method
    }

    _createM2MExpVulItem(swExp: any, vulItem: any): void {
        // Stub for _createM2MExpVulItem method
    }

    _insertVulnerableItem(vulnEntry: any, installationRecord: any, sw_vulnerability: any): void {
        // Stub for _insertVulnerableItem method
    }

    closeViOnExpDelete(): void {
        // Stub for closeViOnExpDelete method
    }

    updateVulnerableItemsFromInstall(installRecord: any): void {
        // Stub for updateVulnerableItemsFromInstall method
    }

    findCIByNetworkDetails(current: any): void {
        // Stub for findCIByNetworkDetails method
    }

    createTaskFromVulGroup(multiVulGrpGr: any, targetTable: string, parent: any): void {
        // Stub for createTaskFromVulGroup method
    }

    createTaskFromVulnerabilities(multiVulnerableItemGr: any, targetTable: string, parent: any): void {
        // Stub for createTaskFromVulnerabilities method
    }

    _createTaskFromVulItemOrGrp(multiVGr: any, targetTable: string, sourceTable: string, parent: any): void {
        // Stub for _createTaskFromVulItemOrGrp method
    }

    createSIFromVulnerability(vulItemOrGroup: any, parent: any): void {
        // Stub for createSIFromVulnerability method
    }

    createProblemFromVulnerability(vulItemOrGroup: any, parent: any): void {
        // Stub for createProblemFromVulnerability method
    }

    createChangeFromVulnerability(vulItemOrGroup: any, parent: any): void {
        // Stub for createChangeFromVulnerability method
    }

    canShowCreateChangeButton(vulnerabilityGroupGr: any): boolean {
        // Stub for canShowCreateChangeButton method
        return false;
    }

    vulnerableItemsPresent(vulnerabilityGroupGr: any): boolean {
        // Stub for vulnerableItemsPresent method
        return false;
    }

    setEffectedCIs(to: any, effectedCIs: any): void {
        // Stub for setEffectedCIs method
    }

    setAffectedCIsByTaskId(taskId: string, affectedCIs: any): void {
        // Stub for setAffectedCIsByTaskId method
    }

    addVulnerableItemToTask(taskId: string, vulItemId: string): void {
        // Stub for addVulnerableItemToTask method
    }

    _isValidTask(taskId: string, iteration: number): boolean {
        // Stub for _isValidTask method
        return false;
    }

    addVulItemCiToTaskForGroup(taskId: string, vulGroupId: string): void {
        // Stub for addVulItemCiToTaskForGroup method
    }

    addToM2mVgChange(taskId: string, vulGroupId: string): void {
        // Stub for addToM2mVgChange method
    }

    _isVulItemValid(vItem: any): boolean {
        // Stub for _isVulItemValid method
        return false;
    }

    actionSplitGroup(splitActionRecord: any, callFromDataBroker: boolean): void {
        // Stub for actionSplitGroup method
    }

    actionSplitGroupAsynch(splitActionRecord: any): void {
        // Stub for actionSplitGroupAsynch method
    }

    _duplicateGroup(vulGroupId: string, short_desc: string, vulAction: any): void {
        // Stub for _duplicateGroup method
    }

    _moveSelectedVIs(vulGroupId: string, query: string, newVulGroupId: string, limit: number, vulAction: any): void {
        // Stub for _moveSelectedVIs method
    }

    checkForRollup(grVG: any): void {
        // Stub for checkForRollup method
    }

    _getUniqueCiCount(vulGroupId: string): number {
        // Stub for _getUniqueCiCount method
        return 0;
    }

    reopenVulnerability(vItem: any): void {
        // Stub for reopenVulnerability method
    }

    reopenVulnerableItem(vItem: any, doNotUpdate: boolean, isManuallyReopened: boolean): void {
        // Stub for reopenVulnerableItem method
    }

    resetChangeApproval(vItem: any, changeApprovalIds: any, grVCAforCompensatingControl: any): void {
        // Stub for resetChangeApproval method
    }

    resetChangeApprovalForWorkFlow(vItem: any): void {
        // Stub for resetChangeApprovalForWorkFlow method
    }

    cancelApproval(changeApprovalIds: any): void {
        // Stub for cancelApproval method
    }

    generateClickThroughURL(record: any, extra: any): string {
        // Stub for generateClickThroughURL method
        return '';
    }

    runScheduledRefreshNonVGRGroup(): void {
        // Stub for runScheduledRefreshNonVGRGroup method
    }

    runScheduledRefreshNonAppVGRGroup(): void {
        // Stub for runScheduledRefreshNonAppVGRGroup method
    }

    getCredentialList(integrationID: string): any[] {
        // Stub for getCredentialList method
        return [];
    }

    getRiskRatingFromRiskScore(rs: number, type: string): string {
        // Stub for getRiskRatingFromRiskScore method
        return '';
    }

    updateEmtpyRiskRatings(low: number, high: number): void {
        // Stub for updateEmtpyRiskRatings method
    }

    _getMatchingVICount(encodedQuery: string): number {
        // Stub for _getMatchingVICount method
        return 0;
    }

    _runBatchUpdate(vi: any, column: string, value: any): void {
        // Stub for _runBatchUpdate method
    }

    _runBatchingQuery(encodedQuery: string, previousVINumber: number): any {
        // Stub for _runBatchingQuery method
        return null;
    }

    updateClosedWithEmptyTTRStatus(): void {
        // Stub for updateClosedWithEmptyTTRStatus method
    }

    updateEmptyTTRsToNoTarget(): void {
        // Stub for updateEmptyTTRsToNoTarget method
    }

    updateClosedToTargetMet(): void {
        // Stub for updateClosedToTargetMet method
    }

    getCIManagers(): any[] {
        // Stub for getCIManagers method
        return [];
    }

    countVIs(): number {
        // Stub for countVIs method
        return 0;
    }

    countforVRasync(specificVulId: string): number {
        // Stub for countforVRasync method
        return 0;
    }

    countVIUsingManifest(specificVulId: string, start: number, end: number): number {
        // Stub for countVIUsingManifest method
        return 0;
    }

    countAVIUsingManifest(specificVulId: string, start: number, end: number): number {
        // Stub for countAVIUsingManifest method
        return 0;
    }

    countVRUsingManifest(specificVulId: string, start: number, end: number): number {
        // Stub for countVRUsingManifest method
        return 0;
    }

    countforVR(specificVulId: string): number {
        // Stub for countforVR method
        return 0;
    }

    countforVG(specificVGId: string, workflow: any): number {
        // Stub for countforVG method
        return 0;
    }

    countforAppVG(specificVGId: string, workflow: any): number {
        // Stub for countforAppVG method
        return 0;
    }

    _getSubstateCount(groupId: string, VG: any): number {
        // Stub for _getSubstateCount method
        return 0;
    }

    resetCountsOnVG(group: any): void {
        // Stub for resetCountsOnVG method
    }

    enableConfigAndVulSoft(): void {
        // Stub for enableConfigAndVulSoft method
    }

    getPerformanceMetrics(runGr: any, excludeProcessList: any[]): any {
        // Stub for getPerformanceMetrics method
        return null;
    }

    _isVIIntegrationRun(runGr: any): boolean {
        // Stub for _isVIIntegrationRun method
        return false;
    }

    _getOpenDetectionCount(runGr: any): number {
        // Stub for _getOpenDetectionCount method
        return 0;
    }

    populateStats(runGr: any, key: string, value: any): void {
        // Stub for populateStats method
    }

    getPerformanceMetricsForProcess(processGr: any): any {
        // Stub for getPerformanceMetricsForProcess method
        return null;
    }

    _hasInvalidCI(vItem: any): boolean {
        // Stub for _hasInvalidCI method
        return false;
    }

    _hasIncorrectCI(vItem: any): boolean {
        // Stub for _hasIncorrectCI method
        return false;
    }

    _hasDecommissionedCI(vItem: any): boolean {
        // Stub for _hasDecommissionedCI method
        return false;
    }

    lookupVI(viKey: string, fieldsMap: any, integrationInstance: any): any {
        // Stub for lookupVI method
        return null;
    }

    shouldShowVICount(): boolean {
        // Stub for shouldShowVICount method
        return false;
    }

    showVICountOnWorkspace(): void {
        // Stub for showVICountOnWorkspace method
    }

    showAVITCountOnWorkspace(): void {
        // Stub for showAVITCountOnWorkspace method
    }

    showCVITCountOnWorkspace(): void {
        // Stub for showCVITCountOnWorkspace method
    }

    showTRCountOnWorkspace(): void {
        // Stub for showTRCountOnWorkspace method
    }

    updateStateToReadyState(splitActionRecord: any): void {
        // Stub for updateStateToReadyState method
    }

    createvulnerableitem(vulnerability: any, sysIds: any): void {
        // Stub for createvulnerableitem method
    }

    setWorkflowForCVIT(cVITGr: any): void {
        // Stub for setWorkflowForCVIT method
    }

    _insertVulnerableItemVulnerabilityAssessment(vulnEntry: any, cmdbCi: any): void {
        // Stub for _insertVulnerableItemVulnerabilityAssessment method
    }

    getChangeApprovalGrForCompensatingControl(vulRecord: any): any {
        // Stub for getChangeApprovalGrForCompensatingControl method
        return null;
    }

    getChangeApprovalIds(vItem: any, grVCACompensatingControl: any): any {
        // Stub for getChangeApprovalIds method
        return null;
    }

    _formatMessage(message: string, placeholder: string): string {
        // Stub for _formatMessage method
        return '';
    }

    getStatusCodeMessage(statusCode: number, placeholder: string): string {
        // Stub for getStatusCodeMessage method
        return '';
    }
}