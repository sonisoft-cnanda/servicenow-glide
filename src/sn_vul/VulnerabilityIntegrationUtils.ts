import { GlideDateTime } from "../imports/GlideDateTime";
import { GlideRecord } from "../imports/GlideRecord";

export class VulnerabilityIntegrationUtils {
    private _MAX_PROC_TIME_S: number = 3600; // 60 min.
    private _MAX_RETRIES: number = 5; // number of times to retry jobs that are cancelled because of a timeout

    constructor() {}

    addIntegrationRun(integrationGr: GlideRecord, optInitialState?: string): string {
        return '';
    }

    private _checkWhetherToRun(integrationGr: GlideRecord): string | null {
        return null;
    }

    private _checkExistingRunInReady(integrationGr: GlideRecord): boolean {
        return false;
    }

    shouldStartIntegrationRun(integrationRunGr: GlideRecord): boolean {
        return false;
    }

    markProcessAsTimeOut(integrations: string[], agentcorrelatorMap: Record<string, string>, timeOut: number): void {}

    private _handleLongRunningProcess(correlators: string[], rangeStarting: GlideDateTime, timeOut: number): void {}

    getNextIntegrationRun(integrationSysId: string): GlideRecord | null {
        return null;
    }

    private _isThirdPartyEntryIntegration(integrationGr: GlideRecord): boolean {
        return false;
    }

    onIntegrationRunComplete(integrationRun: GlideRecord): void {}

    private _processThirdPartyEntryImport(domain: string, start: GlideDateTime, end: GlideDateTime): void {}

    processSolutionImport(domain: string, source: string, start: GlideDateTime, end: GlideDateTime): void {}

    startIntegrationRun(runGr: GlideRecord): string {
        return '';
    }

    private _getBackgroundJobRunning(jobList: string[]): string | null {
        return null;
    }

    private _checkWhetherProofGranularityJobRunning(): boolean {
        return false;
    }

    updateIntegrationRun(runGr: GlideRecord, state: string, substate: string, notes: string, fatal_error_id?: string, fatal_error_message?: string, parameterRaw?: string, parameterDisplay?: string): void {}

    updateIntegrationProcess(procGr: GlideRecord, state: string, notes?: string): void {}

    addProcessRun(runGr: GlideRecord, parameters?: Record<string, any>): string {
        return '';
    }

    kickTimedOutIntegrationRuns(): void {}

    cleanupOldProcessAttachments(): void {}

    getIntegrationRunRecord(integrationProcessGr: GlideRecord): GlideRecord | null {
        return null;
    }

    retryProcesses(): void {}

    retryCancelledProcesses(): void {}

    private _logRetryCancelledProcess(intProcGr: GlideRecord): void {}

    private _retryCancelledProcess(intProcGr: GlideRecord): void {}

    private _checkProcessInRunning(process: GlideRecord): boolean {
        return false;
    }

    retryErroredProcesses(): void {}

    private _logRetryErrorProcess(intProcGr: GlideRecord): void {}

    private _retryErroredProcess(intProcGr: GlideRecord): void {}

    private _copyProcess(intProcGr: GlideRecord, isProcessErrored?: boolean): GlideRecord {
        return new GlideRecord('');
    }

    private _isValidSourceName(sourceName: string): boolean {
        return false;
    }

    haltIntegrationRun(scopeId: string, runList: string): number {
        return 0;
    }

    private _deleteIntegrationProcess(integrationRunList: string[]): string[] {
        return [];
    }

    private _deleteQueueEntry(integrationProcessList: string[]): void {}

    deleteIntegrationData(sourceName: string): void {}

    mergeJSON(json: Record<string, any>, jsonContent: Record<string, any>): Record<string, any> {
        return {};
    }

    checkIfNeedsProcessing(integrationGr: GlideRecord): boolean {
        return false;
    }

    type(): string {
        return 'VulnerabilityIntegrationUtils';
    }
}