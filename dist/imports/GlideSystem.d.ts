import { GlideRecord } from './GlideRecord.js';
import { UpgradeDebuggerResult } from './UpgradeDebuggerResult.js';
import { GlideUser } from './GlideUser.js';
import { GlideDateTime } from './GlideDateTime.js';
import { NativeObject } from './NativeObject.js';
export declare class GlideSystem {
    OLAPBuildTimeDimension(): void;
    _cacheFlush(): void;
    _dropTable(tableName?: string): void;
    _getScriptError(script?: string, scopeId?: string): string;
    _getScriptErrorForTable(script?: string, scopeId?: string, table?: string): string;
    addErrorMessage(error?: any, messageKey?: string): void;
    addErrorMessageNoSanitization(error?: any, messageKey?: string): void;
    addInfoMessage(message?: any, messageKey?: string): void;
    addInfoMessageNoSanitization(message?: any, messageKey?: string): void;
    addMessage(bucket?: string, message?: any, messageKey?: string): void;
    addUpgradeDebuggerArtifact(tableName?: string, sysId?: string): void;
    alterSqlFieldDefintion(table?: string, element?: string, oldLength?: any): void;
    appLoad(dirName?: string): void;
    appLoadData(dirName?: string): void;
    appLoadDemo(dirName?: string): void;
    appUpdate(dirName?: string): void;
    appUpgrade(dirName?: string): void;
    beginningOfCurrentHour(): string;
    beginningOfCurrentMinute(): string;
    beginningOfDay(o?: any): string;
    beginningOfLast120Days(): string;
    beginningOfLast12Months(): string;
    beginningOfLast15Minutes(): string;
    beginningOfLast2Hours(): string;
    beginningOfLast2Quarters(): string;
    beginningOfLast2Years(): string;
    beginningOfLast30Days(): string;
    beginningOfLast30Minutes(): string;
    beginningOfLast3Months(): string;
    beginningOfLast45Minutes(): string;
    beginningOfLast60Days(): string;
    beginningOfLast6Months(): string;
    beginningOfLast7Days(): string;
    beginningOfLast90Days(): string;
    beginningOfLast9Months(): string;
    beginningOfLastHour(): string;
    beginningOfLastMinute(): string;
    beginningOfLastMonth(): string;
    beginningOfLastQuarter(): string;
    beginningOfLastSchedulePeriod(scheduleId?: string): string;
    beginningOfLastWeek(): string;
    beginningOfLastYear(): string;
    beginningOfMonth(o?: any): string;
    beginningOfNext2Quarters(): string;
    beginningOfNextMonth(): string;
    beginningOfNextQuarter(): string;
    beginningOfNextSchedulePeriod(scheduleId?: string): string;
    beginningOfNextWeek(): string;
    beginningOfNextYear(): string;
    beginningOfOneYearAgo(): string;
    beginningOfSchedulePeriodsAgo(periodsAgo?: number, scheduleId?: string): string;
    beginningOfThisMonth(): string;
    beginningOfThisQuarter(): string;
    beginningOfThisSchedulePeriod(scheduleId?: string): string;
    beginningOfThisWeek(): string;
    beginningOfThisYear(): string;
    beginningOfToday(): string;
    beginningOfTomorrow(): string;
    beginningOfWeek(o?: any): string;
    beginningOfYear(o?: any): string;
    beginningOfYesterday(): string;
    breaker(obj?: any): void;
    cacheFlush(catalog?: any, invalidateMetaData?: any): void;
    calDateDiff(startDate?: string, endDate?: string, numericValue?: boolean): string;
    createUser(common_name?: string): string;
    dateAdd(unit?: string, offset?: number, basis?: any): string;
    dateDiff(startDate?: string, endDate?: string, bnumericValue?: boolean): string;
    dateGenerate(date?: string, range?: string): string;
    datePart(interval?: string, value?: string, oper?: string): string;
    daysAgo(days?: number): string;
    daysAgoEnd(days?: number): string;
    daysAgoLocal(days?: number): string;
    daysAgoStart(days?: number): string;
    debug(message?: string, parm1?: any, parm2?: any, parm3?: any, parm4?: any, parm5?: any): void;
    disableSessionScopeDebug(scopeName?: string): void;
    dropColumn(tableName?: string, fieldName?: string): void;
    dropColumnQuick(tableName?: string, fieldName?: string): void;
    dropTable(tableName?: string): void;
    dropTableRecord(dbObject?: GlideRecord): void;
    dumpProperties(): void;
    dumpPropertiesSecured(): void;
    enableSessionScopeDebug(scopeName?: string): void;
    endOfCurrentHour(): string;
    endOfCurrentMinute(): string;
    endOfDay(o?: any): string;
    endOfLast120Days(): string;
    endOfLast12Months(): string;
    endOfLast15Minutes(): string;
    endOfLast2Hours(): string;
    endOfLast2Quarters(): string;
    endOfLast2Years(): string;
    endOfLast30Days(): string;
    endOfLast30Minutes(): string;
    endOfLast3Months(): string;
    endOfLast45Minutes(): string;
    endOfLast60Days(): string;
    endOfLast6Months(): string;
    endOfLast7Days(): string;
    endOfLast90Days(): string;
    endOfLast9Months(): string;
    endOfLastHour(): string;
    endOfLastMinute(): string;
    endOfLastMonth(): string;
    endOfLastQuarter(): string;
    endOfLastSchedulePeriod(scheduleId?: string): string;
    endOfLastWeek(): string;
    endOfLastYear(): string;
    endOfMonth(o?: any): string;
    endOfNext2Quarters(): string;
    endOfNextMonth(): string;
    endOfNextQuarter(): string;
    endOfNextSchedulePeriod(scheduleId?: string): string;
    endOfNextWeek(): string;
    endOfNextYear(): string;
    endOfOneYearAgo(): string;
    endOfSchedulePeriodsAgo(periodsAgo?: number, scheduleId?: string): string;
    endOfThisMonth(): string;
    endOfThisQuarter(): string;
    endOfThisSchedulePeriod(scheduleId?: string): string;
    endOfThisWeek(): string;
    endOfThisYear(): string;
    endOfToday(): string;
    endOfTomorrow(): string;
    endOfWeek(o?: any): string;
    endOfYear(o?: any): string;
    endOfYesterday(): string;
    ensureCompositeIndex(tableName?: string, sfields?: string, indexName?: string): void;
    ensureIndex(tableName?: string, elementName?: string): boolean;
    error(message?: string, parm1?: any, parm2?: any, parm3?: any, parm4?: any, parm5?: any): void;
    escaper(string?: string): string;
    eventQueue(name?: string, instance?: any, parm1?: string, parm2?: string, queue?: string): void;
    eventQueueScheduled(name?: string, instance?: any, parm1?: string, parm2?: string, expiration?: any): void;
    eventsProcess(): void;
    executeCondition(condition?: string): boolean;
    executeNow(current?: any): string;
    fieldExists(tableName?: string, fieldName?: string): boolean;
    fileExists(fileName?: string): boolean;
    flushAccessMessages(): void;
    flushMessages(): void;
    flushStatus(): void;
    generateGUID(o?: any): string;
    generateURL(table?: string, key?: string, view?: any): string;
    getAccessMessages(): Array<any>;
    getBooleanPreference(key?: string, defaultValue?: boolean): boolean;
    getCallerScopeName(): string;
    getCannotConfigureScopeReason(scopeID?: string): string;
    getCssCacheVersionString(theme?: string): string;
    getCurrentApplicationId(): string;
    getCurrentApplicationName(): string;
    getCurrentApplicationScope(): string;
    getCurrentScopeName(): string;
    getCustomerPrefix(): string;
    getDateFormat(): string;
    getDateTimeFormat(): string;
    getDictionaryEntryPackage(tableName?: string, fieldName?: string): string;
    getDictionaryEntryScope(tableName?: string, fieldName?: string): string;
    getDisplayColumn(tableName?: string): string;
    getDisplayValueFor(table?: string, key?: string, field?: string): string;
    getDurationDate(duration?: string): string;
    getErrorMessages(): Array<any>;
    getEscapedMessage(id?: string, args?: any): string;
    getEscapedProperty(key?: string, alt?: any): string;
    getEscapedPropertySecured(key?: string, alt?: any): string;
    getGlideHome(): string;
    getImpersonatingUserDisplayName(): string;
    getImpersonatingUserID(): string;
    getImpersonatingUserName(): string;
    getInScopeDBViews(): Array<string>;
    getInScopeTables(): Array<string>;
    getInfoMessages(): Array<any>;
    getInstanceIP(): string;
    getJavaVersion(): string;
    getJellyVariable(name?: string): any;
    getMaxSchemaNameLength(): number;
    getMessage(id?: string, args?: any): string;
    getMessageLang(id?: string, language?: string, args?: any): string;
    getMessageS(id?: string, args?: any): string;
    getMessages(type?: string): Array<any>;
    getNavMessage(): any;
    getNewAppScopeCompanyPrefix(): string;
    getNodeID(): string;
    getNodeName(o?: any, i?: number): string;
    getNodeValue(o?: any, i?: number): string;
    getNumericPreference(key?: string, defaultValue?: number): number;
    getPreference(key?: string, defaultValue?: any): string;
    getProperty(key?: string, alt?: any): string;
    getPropertySecured(key?: string, alt?: any): string;
    getScopeIdByElementName(tableName?: string, elementName?: string): string;
    getScopeIdByRecordId(sysId?: string): string;
    getScopeLabelByElementName(tableName?: string, elementName?: string): string;
    getScopeLabelByRecordId(sysId?: string): string;
    getScopeNameByElementName(tableName?: string, elementName?: string): string;
    getScopeNameByRecordId(sysId?: string): string;
    getScriptError(script?: string): string;
    getScriptErrorFromScope(script?: string, scopeId?: string): string;
    getSession(): any;
    getSessionID(): string;
    getSessionToken(): string;
    getStyle(tableName?: string, fieldName?: string, fieldValue?: string): string;
    getSysTimeZone(): string;
    getSystemID(): string;
    getTempDir(): string;
    getTimeFormat(): string;
    getTrivialMessages(): Array<any>;
    getUpgradeDebuggerResult(): UpgradeDebuggerResult;
    getUrlOnStack(): string;
    getUser(): GlideUser;
    getUserDisplayName(): string;
    getUserID(): string;
    getUserName(): string;
    getUserNameByUserID(userID?: string): string;
    getVendorPrefixPrefix(): string;
    getXMLNodeList(xml?: string): Array<any>;
    getXMLText(xml?: string, xpath?: string): string;
    globalPut(name?: string, g?: any): void;
    hasMessages(buckets?: any): boolean;
    hasRightsTo(resourcePath?: string, context?: any): boolean;
    hasRole(role?: string): boolean;
    hasRoleInGroup(role?: any, group?: any): boolean;
    healthCheck(filePattern?: string, reportonly?: boolean): boolean;
    hoursAgo(hours?: number): string;
    hoursAgoEnd(hours?: number): string;
    hoursAgoLocal(hours?: number): string;
    hoursAgoStart(hours?: number): string;
    include(name?: string): boolean;
    indexUpdate(dirName?: string): void;
    info(message?: string, parm1?: any, parm2?: any, parm3?: any, parm4?: any, parm5?: any): void;
    installationSetting(spec?: string, ref?: string): string;
    invalidateCache(): void;
    isCleaningDemoData(): boolean;
    isCurrentApplicationCrossScopeProtected(): boolean;
    isCurrentApplicationCustom(): boolean;
    isCurrentApplicationInGlobalScope(): boolean;
    isDatabaseView(table?: string): boolean;
    isDebugging(): boolean;
    isESLatest(): boolean;
    isEdgeEncryptedSession(): boolean;
    isFirstDayOfMonth(o?: any): boolean;
    isFirstDayOfWeek(o?: any): boolean;
    isFirstDayOfYear(o?: any): boolean;
    isInteractive(): boolean;
    isInteractiveSession(): boolean;
    isLastDayOfMonth(o?: any): boolean;
    isLastDayOfWeek(o?: any): boolean;
    isLastDayOfYear(o?: any): boolean;
    isLoggedIn(): boolean;
    isMobile(): boolean;
    isPaused(): boolean;
    isPausedForAtfPerformance(): boolean;
    isScopeAdminForAnyApp(): boolean;
    isScopedAdminApp(): boolean;
    isScopedApp(): boolean;
    isSessionScopeDebugging(scopeName?: string): boolean;
    isTableInScope(tableName?: string): boolean;
    isUpgradeDebuggerEnabled(): boolean;
    isValidScript(script?: string): boolean;
    isValidScriptFromScope(script?: string, scopeId?: string): boolean;
    lastWeek(): string;
    load(fileName?: string): void;
    loadBatchScript(fileName?: string): void;
    loadFixes(o?: any): void;
    loadResource(pluginName?: string, resourcePath?: string): void;
    loadUpdates(o?: any): void;
    log(message?: string, source?: string): void;
    logError(message?: string, source?: string): void;
    logWarning(message?: string, source?: string): void;
    mergeAttribute(tableName?: string, parm1?: string, parm2?: string): void;
    minutesAgo(minutes?: number): string;
    minutesAgoEnd(minutes?: number): string;
    minutesAgoStart(minutes?: number): string;
    monthsAgo(month?: number): string;
    monthsAgoEnd(month?: number): string;
    monthsAgoStart(month?: number): string;
    nil(o?: any): boolean;
    now(): string;
    nowDateTime(): string;
    nowGlideDateTime(): GlideDateTime;
    nowNoTZ(): string;
    pause(): void;
    print(toPrint?: string): void;
    processDelegatedEvents(): void;
    publish(channel?: string, data?: any): void;
    publishToUser(channel?: string, data?: any, toUser?: string): void;
    quartersAgo(quarters?: number): string;
    quartersAgoEnd(quarters?: number): string;
    quartersAgoStart(quarters?: number): string;
    rebuildAllIndexes(): void;
    rebuildIndexes(tableName?: string): void;
    renameTable(tableName?: string, newTableName?: string, cacheFlush?: boolean): void;
    reset(): boolean;
    resetDB(dbName?: string): void;
    resolveIcon(className?: string): string;
    resume(): void;
    scheduleScript(scriptName?: string, currentObj?: any, parmString?: any): void;
    setCannotCancel(b?: boolean): boolean;
    setCleaningDemoData(cleaning?: boolean): void;
    setCurrentApplicationId(appId?: string): string;
    setProperty(key?: string, value?: string, description?: string): void;
    setRedirect(o?: any): void;
    setReturn(o?: any): void;
    setTrackMetadataDeletes(onOrOff?: boolean): boolean;
    sleep(i?: number): void;
    sql(statement?: string): void;
    sqlItemsByField(table?: string, sfields?: any, fwfield?: string, value?: string, limit?: number): Array<any>;
    sqlItemsByID(table?: string, sfields?: any, sys_id?: string, limit?: number): Array<any>;
    statsThisSession(onOff?: boolean): void;
    statsThisSessionThreshold(threshold?: number): void;
    suppressTextIndex(suppress?: boolean): boolean;
    suppressUpdateSynch(suppress?: boolean): boolean;
    tableCreate(name?: string, label?: any): string;
    tableDrop(name?: string): void;
    tableExists(name?: string): boolean;
    templateExists(templateName?: string): boolean;
    templateOrMacroExists(templateName?: string): boolean;
    trace(onOff?: boolean): void;
    transpile(script?: string, swcOptions?: string): string;
    truncateTable(name?: string): void;
    unWrap(url?: string): string;
    unload(tableName?: string, fileName?: string): void;
    unloadAll(path?: string): void;
    unloadChoices(tableName?: string, fieldName?: string, baseline?: string): void;
    unloadRecordToXML(o?: any, indent?: boolean): string;
    unloadWithQuery(tableName?: string, fileName?: string, query?: string): void;
    updateSave(o?: any): void;
    updateUnload(): void;
    updateUserRoles(userSysId?: string): void;
    user(): string;
    userID(): string;
    user_id(): string;
    warn(message?: string, parm1?: any, parm2?: any, parm3?: any, parm4?: any, parm5?: any): void;
    workflowFlush(o?: any): void;
    xmlToJSON(xmlString?: string): NativeObject;
    yearsAgo(year?: number): string;
    yesterday(): string;
}
//# sourceMappingURL=GlideSystem.d.ts.map