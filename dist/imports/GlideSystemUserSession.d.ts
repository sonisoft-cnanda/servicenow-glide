import { UpgradeDebuggerResult } from './UpgradeDebuggerResult.js';
import { GlideUser } from './GlideUser.js';
export declare class GlideSystemUserSession {
    addErrorMessage(error?: any, messageKey?: string): void;
    addErrorMessageNoSanitization(error?: any, messageKey?: string): void;
    addInfoMessage(message?: any, messageKey?: string): void;
    addInfoMessageNoSanitization(message?: any, messageKey?: string): void;
    addMessage(bucket?: string, message?: any, messageKey?: string): void;
    addUpgradeDebuggerArtifact(tableName?: string, sysId?: string): void;
    createUser(common_name?: string): string;
    flushAccessMessages(): void;
    flushMessages(): void;
    getAccessMessages(): Array<any>;
    getCurrentApplicationId(): string;
    getCurrentApplicationName(): string;
    getCurrentApplicationScope(): string;
    getDateFormat(): string;
    getDateTimeFormat(): string;
    getErrorMessages(): Array<any>;
    getImpersonatingUserDisplayName(): string;
    getImpersonatingUserID(): string;
    getImpersonatingUserName(): string;
    getInfoMessages(): Array<any>;
    getMessages(type?: string): Array<any>;
    getNavMessage(): any;
    getSessionToken(): string;
    getSysTimeZone(): string;
    getTimeFormat(): string;
    getTrivialMessages(): Array<any>;
    getUpgradeDebuggerResult(): UpgradeDebuggerResult;
    getUrlOnStack(): string;
    getUser(): GlideUser;
    getUserDisplayName(): string;
    getUserID(): string;
    getUserName(): string;
    getUserNameByUserID(userID?: string): string;
    hasMessages(buckets?: any): boolean;
    hasRoleInGroup(role?: any, group?: any): boolean;
    isCurrentApplicationCrossScopeProtected(): boolean;
    isCurrentApplicationCustom(): boolean;
    isCurrentApplicationInGlobalScope(): boolean;
    isInteractive(): boolean;
    isLoggedIn(): boolean;
    isScopeAdminForAnyApp(): boolean;
    isUpgradeDebuggerEnabled(): boolean;
    setCurrentApplicationId(appId?: string): string;
    setRedirect(o?: any): void;
    setReturn(o?: any): void;
    setTrackMetadataDeletes(onOrOff?: boolean): boolean;
    statsThisSession(onOff?: boolean): void;
    statsThisSessionThreshold(threshold?: number): void;
    suppressTextIndex(suppress?: boolean): boolean;
    suppressUpdateSynch(suppress?: boolean): boolean;
    updateUserRoles(userSysId?: string): void;
    user(): string;
    userID(): string;
    user_id(): string;
}
//# sourceMappingURL=GlideSystemUserSession.d.ts.map