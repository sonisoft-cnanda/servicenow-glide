import { GlideDateTime } from './GlideDateTime.js';
export declare class GlideSystemDateUtil2 {
    beginningOfDay(o?: any): string;
    beginningOfLastMonth(): string;
    beginningOfLastWeek(): string;
    beginningOfLastYear(): string;
    beginningOfMonth(o?: any): string;
    beginningOfNextMonth(): string;
    beginningOfNextWeek(): string;
    beginningOfNextYear(): string;
    beginningOfThisMonth(): string;
    beginningOfThisQuarter(): string;
    beginningOfThisWeek(): string;
    beginningOfThisYear(): string;
    beginningOfToday(): string;
    beginningOfTomorrow(): string;
    beginningOfWeek(o?: any): string;
    beginningOfYear(o?: any): string;
    beginningOfYesterday(): string;
    calDateDiff(startDate?: string, endDate?: string, numericValue?: boolean): string;
    dateAdd(unit?: string, offset?: number, basis?: any): string;
    dateDiff(startDate?: string, endDate?: string, bnumericValue?: boolean): string;
    dateGenerate(date?: string, range?: string): string;
    datePart(interval?: string, value?: string, oper?: string): string;
    daysAgo(days?: number): string;
    daysAgoEnd(days?: number): string;
    daysAgoLocal(days?: number): string;
    daysAgoStart(days?: number): string;
    endOfDay(o?: any): string;
    endOfLastMonth(): string;
    endOfLastWeek(): string;
    endOfLastYear(): string;
    endOfMonth(o?: any): string;
    endOfNextMonth(): string;
    endOfNextWeek(): string;
    endOfNextYear(): string;
    endOfThisMonth(): string;
    endOfThisQuarter(): string;
    endOfThisWeek(): string;
    endOfThisYear(): string;
    endOfToday(): string;
    endOfTomorrow(): string;
    endOfWeek(o?: any): string;
    endOfYear(o?: any): string;
    endOfYesterday(): string;
    getDurationDate(duration?: string): string;
    hoursAgo(hours?: number): string;
    hoursAgoEnd(hours?: number): string;
    hoursAgoLocal(hours?: number): string;
    hoursAgoStart(hours?: number): string;
    isFirstDayOfMonth(o?: any): boolean;
    isFirstDayOfWeek(o?: any): boolean;
    isFirstDayOfYear(o?: any): boolean;
    isLastDayOfMonth(o?: any): boolean;
    isLastDayOfWeek(o?: any): boolean;
    isLastDayOfYear(o?: any): boolean;
    lastWeek(): string;
    minutesAgo(minutes?: number): string;
    minutesAgoEnd(minutes?: number): string;
    minutesAgoStart(minutes?: number): string;
    monthsAgo(month?: number): string;
    monthsAgoEnd(month?: number): string;
    monthsAgoStart(month?: number): string;
    now(): string;
    nowDateTime(): string;
    nowGlideDateTime(): GlideDateTime;
    nowNoTZ(): string;
    quartersAgo(quarters?: number): string;
    quartersAgoEnd(quarters?: number): string;
    quartersAgoStart(quarters?: number): string;
    yearsAgo(year?: number): string;
    yesterday(): string;
}
//# sourceMappingURL=GlideSystemDateUtil2.d.ts.map