import { GlideQueryCondition } from '../imports/GlideQueryCondition.js';
import { GlideElementDescriptor } from '../imports/GlideElementDescriptor.js';
import { GlideElement } from '../imports/GlideElement.js';
export declare class GlideRecord {
    constructor(tableName: string);
    addActiveQuery(): GlideQueryCondition;
    addEncodedQuery(query: string, enforceFieldACLs?: boolean): void;
    addFunction(func: object): void;
    addJoinQuery(joinTable: string, primaryField?: string, joinTableField?: string): GlideQueryCondition;
    addNotNullQuery(fieldName: string): GlideQueryCondition;
    addNullQuery(fieldName: string): GlideQueryCondition;
    addQuery(name: string, operator: string, value: any): GlideQueryCondition;
    addQuery(name: string, value: any): GlideQueryCondition;
    addValue(field: string, value: number): void;
    applyEncodedQuery(queryString: string): void;
    canCreate(): boolean;
    canDelete(): boolean;
    canRead(): boolean;
    canWrite(): boolean;
    chooseWindow(firstRow: number, lastRow: number, forceCount?: boolean): void;
    deleteMultiple(): void;
    deleteRecord(): boolean;
    disableSysIdInOptimization(): void;
    get(name: string, value?: any): boolean;
    getAttribute(fieldName: string): string;
    getClassDisplayValue(): string;
    getDisplayValue(fieldName?: string): string;
    getED(): GlideElementDescriptor;
    getElement(fieldName: string): GlideElement;
    getElements(): GlideElement[];
    getEncodedQuery(): string;
    getLabel(): string;
    getLastErrorMessage(): string;
    getLink(noStack?: boolean): string;
    getRecordClassName(): string;
    getRowCount(): number;
    getTableName(): string;
    getUniqueValue(): string;
    getValue(fieldName: string): string;
    hasNext(): boolean;
    initialize(): void;
    insert(): string;
    isActionAborted(): boolean;
    isEncodedQueryValid(query: string): boolean;
    isNewRecord(): boolean;
    isValid(): boolean;
    isValidRecord(): boolean;
    isValidField(fieldName: string): boolean;
    next(): boolean;
    orderBy(fieldName: string): void;
    orderByDesc(fieldName: string): void;
    operation(): string;
    query(): void;
    setLimit(limit: number): void;
    setValue(fieldName: string, value: any): void;
    update(): string;
    updateMultiple(): void;
}
//# sourceMappingURL=GlideRecord.d.ts.map