"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VulnerabilityUtils = void 0;
class VulnerabilityUtils {
    constructor() {
        this.DEFAULT_MSG_FOR_UNKNOWN_VUL = '';
        this.PAGE_SIZE = 5000;
        this.CLOSE_STATE = "3";
        this.DEFER_STATE = "12";
        this.AWAIT_IMPL = "10";
        this.INVALID_CI_SUBSTATE = 7;
        this.SOURCE = "ServiceNow VR";
        this.VulnerableSwDisMatchObj = null;
        this.SOLUTION_VENDOR_MAP = ['Microsoft', 'Red Hat'];
        // Initialization code here
    }
    initialize() {
        // Stub for initialize method
    }
    isSAMNVDOn() {
        // Stub for isSAMNVDOn method
        return false;
    }
    getCIFilter() {
        // Stub for getCIFilter method
        return '';
    }
    getVulFilter() {
        // Stub for getVulFilter method
        return '';
    }
    createVulGroupFromFilter(filter) {
        // Stub for createVulGroupFromFilter method
    }
    refreshVulnerableItemsforNVD(current) {
        // Stub for refreshVulnerableItemsforNVD method
    }
    insertVulnerableItemForSAM(vulEntry, installationRecord) {
        // Stub for insertVulnerableItemForSAM method
    }
    insertVulnerabilityVendorMappingData(vulID, scannerName, vendorName) {
        // Stub for insertVulnerabilityVendorMappingData method
    }
    _checkAndInsertVendorMappings(vul, scannerName, vendorName) {
        // Stub for _checkAndInsertVendorMappings method
    }
    _insertVulnerabilityVendorMappingData(vulID, vendorName) {
        // Stub for _insertVulnerabilityVendorMappingData method
    }
    refreshVulnerableItems(current) {
        // Stub for refreshVulnerableItems method
    }
    refreshAllVulnerableItemsWithSettings(current) {
        // Stub for refreshAllVulnerableItemsWithSettings method
    }
    _refreshVulnerableItems(current) {
        // Stub for _refreshVulnerableItems method
    }
    refreshVIAfterNVDImport() {
        // Stub for refreshVIAfterNVDImport method
    }
    insertVulnerableItems(installRecord) {
        // Stub for insertVulnerableItems method
    }
    createVISoftwareExp(sysId) {
        // Stub for createVISoftwareExp method
    }
    _getExposureViCount(softExp) {
        // Stub for _getExposureViCount method
        return 0;
    }
    _createM2MExpVul(swExp, vulnEntry) {
        // Stub for _createM2MExpVul method
    }
    _createM2MExpVulItem(swExp, vulItem) {
        // Stub for _createM2MExpVulItem method
    }
    _insertVulnerableItem(vulnEntry, installationRecord, sw_vulnerability) {
        // Stub for _insertVulnerableItem method
    }
    closeViOnExpDelete() {
        // Stub for closeViOnExpDelete method
    }
    updateVulnerableItemsFromInstall(installRecord) {
        // Stub for updateVulnerableItemsFromInstall method
    }
    findCIByNetworkDetails(current) {
        // Stub for findCIByNetworkDetails method
    }
    createTaskFromVulGroup(multiVulGrpGr, targetTable, parent) {
        // Stub for createTaskFromVulGroup method
    }
    createTaskFromVulnerabilities(multiVulnerableItemGr, targetTable, parent) {
        // Stub for createTaskFromVulnerabilities method
    }
    _createTaskFromVulItemOrGrp(multiVGr, targetTable, sourceTable, parent) {
        // Stub for _createTaskFromVulItemOrGrp method
    }
    createSIFromVulnerability(vulItemOrGroup, parent) {
        // Stub for createSIFromVulnerability method
    }
    createProblemFromVulnerability(vulItemOrGroup, parent) {
        // Stub for createProblemFromVulnerability method
    }
    createChangeFromVulnerability(vulItemOrGroup, parent) {
        // Stub for createChangeFromVulnerability method
    }
    canShowCreateChangeButton(vulnerabilityGroupGr) {
        // Stub for canShowCreateChangeButton method
        return false;
    }
    vulnerableItemsPresent(vulnerabilityGroupGr) {
        // Stub for vulnerableItemsPresent method
        return false;
    }
    setEffectedCIs(to, effectedCIs) {
        // Stub for setEffectedCIs method
    }
    setAffectedCIsByTaskId(taskId, affectedCIs) {
        // Stub for setAffectedCIsByTaskId method
    }
    addVulnerableItemToTask(taskId, vulItemId) {
        // Stub for addVulnerableItemToTask method
    }
    _isValidTask(taskId, iteration) {
        // Stub for _isValidTask method
        return false;
    }
    addVulItemCiToTaskForGroup(taskId, vulGroupId) {
        // Stub for addVulItemCiToTaskForGroup method
    }
    addToM2mVgChange(taskId, vulGroupId) {
        // Stub for addToM2mVgChange method
    }
    _isVulItemValid(vItem) {
        // Stub for _isVulItemValid method
        return false;
    }
    actionSplitGroup(splitActionRecord, callFromDataBroker) {
        // Stub for actionSplitGroup method
    }
    actionSplitGroupAsynch(splitActionRecord) {
        // Stub for actionSplitGroupAsynch method
    }
    _duplicateGroup(vulGroupId, short_desc, vulAction) {
        // Stub for _duplicateGroup method
    }
    _moveSelectedVIs(vulGroupId, query, newVulGroupId, limit, vulAction) {
        // Stub for _moveSelectedVIs method
    }
    checkForRollup(grVG) {
        // Stub for checkForRollup method
    }
    _getUniqueCiCount(vulGroupId) {
        // Stub for _getUniqueCiCount method
        return 0;
    }
    reopenVulnerability(vItem) {
        // Stub for reopenVulnerability method
    }
    reopenVulnerableItem(vItem, doNotUpdate, isManuallyReopened) {
        // Stub for reopenVulnerableItem method
    }
    resetChangeApproval(vItem, changeApprovalIds, grVCAforCompensatingControl) {
        // Stub for resetChangeApproval method
    }
    resetChangeApprovalForWorkFlow(vItem) {
        // Stub for resetChangeApprovalForWorkFlow method
    }
    cancelApproval(changeApprovalIds) {
        // Stub for cancelApproval method
    }
    generateClickThroughURL(record, extra) {
        // Stub for generateClickThroughURL method
        return '';
    }
    runScheduledRefreshNonVGRGroup() {
        // Stub for runScheduledRefreshNonVGRGroup method
    }
    runScheduledRefreshNonAppVGRGroup() {
        // Stub for runScheduledRefreshNonAppVGRGroup method
    }
    getCredentialList(integrationID) {
        // Stub for getCredentialList method
        return [];
    }
    getRiskRatingFromRiskScore(rs, type) {
        // Stub for getRiskRatingFromRiskScore method
        return '';
    }
    updateEmtpyRiskRatings(low, high) {
        // Stub for updateEmtpyRiskRatings method
    }
    _getMatchingVICount(encodedQuery) {
        // Stub for _getMatchingVICount method
        return 0;
    }
    _runBatchUpdate(vi, column, value) {
        // Stub for _runBatchUpdate method
    }
    _runBatchingQuery(encodedQuery, previousVINumber) {
        // Stub for _runBatchingQuery method
        return null;
    }
    updateClosedWithEmptyTTRStatus() {
        // Stub for updateClosedWithEmptyTTRStatus method
    }
    updateEmptyTTRsToNoTarget() {
        // Stub for updateEmptyTTRsToNoTarget method
    }
    updateClosedToTargetMet() {
        // Stub for updateClosedToTargetMet method
    }
    getCIManagers() {
        // Stub for getCIManagers method
        return [];
    }
    countVIs() {
        // Stub for countVIs method
        return 0;
    }
    countforVRasync(specificVulId) {
        // Stub for countforVRasync method
        return 0;
    }
    countVIUsingManifest(specificVulId, start, end) {
        // Stub for countVIUsingManifest method
        return 0;
    }
    countAVIUsingManifest(specificVulId, start, end) {
        // Stub for countAVIUsingManifest method
        return 0;
    }
    countVRUsingManifest(specificVulId, start, end) {
        // Stub for countVRUsingManifest method
        return 0;
    }
    countforVR(specificVulId) {
        // Stub for countforVR method
        return 0;
    }
    countforVG(specificVGId, workflow) {
        // Stub for countforVG method
        return 0;
    }
    countforAppVG(specificVGId, workflow) {
        // Stub for countforAppVG method
        return 0;
    }
    _getSubstateCount(groupId, VG) {
        // Stub for _getSubstateCount method
        return 0;
    }
    resetCountsOnVG(group) {
        // Stub for resetCountsOnVG method
    }
    enableConfigAndVulSoft() {
        // Stub for enableConfigAndVulSoft method
    }
    getPerformanceMetrics(runGr, excludeProcessList) {
        // Stub for getPerformanceMetrics method
        return null;
    }
    _isVIIntegrationRun(runGr) {
        // Stub for _isVIIntegrationRun method
        return false;
    }
    _getOpenDetectionCount(runGr) {
        // Stub for _getOpenDetectionCount method
        return 0;
    }
    populateStats(runGr, key, value) {
        // Stub for populateStats method
    }
    getPerformanceMetricsForProcess(processGr) {
        // Stub for getPerformanceMetricsForProcess method
        return null;
    }
    _hasInvalidCI(vItem) {
        // Stub for _hasInvalidCI method
        return false;
    }
    _hasIncorrectCI(vItem) {
        // Stub for _hasIncorrectCI method
        return false;
    }
    _hasDecommissionedCI(vItem) {
        // Stub for _hasDecommissionedCI method
        return false;
    }
    lookupVI(viKey, fieldsMap, integrationInstance) {
        // Stub for lookupVI method
        return null;
    }
    shouldShowVICount() {
        // Stub for shouldShowVICount method
        return false;
    }
    showVICountOnWorkspace() {
        // Stub for showVICountOnWorkspace method
    }
    showAVITCountOnWorkspace() {
        // Stub for showAVITCountOnWorkspace method
    }
    showCVITCountOnWorkspace() {
        // Stub for showCVITCountOnWorkspace method
    }
    showTRCountOnWorkspace() {
        // Stub for showTRCountOnWorkspace method
    }
    updateStateToReadyState(splitActionRecord) {
        // Stub for updateStateToReadyState method
    }
    createvulnerableitem(vulnerability, sysIds) {
        // Stub for createvulnerableitem method
    }
    setWorkflowForCVIT(cVITGr) {
        // Stub for setWorkflowForCVIT method
    }
    _insertVulnerableItemVulnerabilityAssessment(vulnEntry, cmdbCi) {
        // Stub for _insertVulnerableItemVulnerabilityAssessment method
    }
    getChangeApprovalGrForCompensatingControl(vulRecord) {
        // Stub for getChangeApprovalGrForCompensatingControl method
        return null;
    }
    getChangeApprovalIds(vItem, grVCACompensatingControl) {
        // Stub for getChangeApprovalIds method
        return null;
    }
    _formatMessage(message, placeholder) {
        // Stub for _formatMessage method
        return '';
    }
    getStatusCodeMessage(statusCode, placeholder) {
        // Stub for getStatusCodeMessage method
        return '';
    }
}
exports.VulnerabilityUtils = VulnerabilityUtils;
//# sourceMappingURL=VulnerabilityUtils.js.map