import { GlideDateTime } from "../imports/GlideDateTime.js";
import { GlideRecord } from "../imports/GlideRecord.js";
export declare class VulnerabilityIntegrationUtils {
    private _MAX_PROC_TIME_S;
    private _MAX_RETRIES;
    constructor();
    addIntegrationRun(integrationGr: GlideRecord, optInitialState?: string): string;
    private _checkWhetherToRun;
    private _checkExistingRunInReady;
    shouldStartIntegrationRun(integrationRunGr: GlideRecord): boolean;
    markProcessAsTimeOut(integrations: string[], agentcorrelatorMap: Record<string, string>, timeOut: number): void;
    private _handleLongRunningProcess;
    getNextIntegrationRun(integrationSysId: string): GlideRecord | null;
    private _isThirdPartyEntryIntegration;
    onIntegrationRunComplete(integrationRun: GlideRecord): void;
    private _processThirdPartyEntryImport;
    processSolutionImport(domain: string, source: string, start: GlideDateTime, end: GlideDateTime): void;
    startIntegrationRun(runGr: GlideRecord): string;
    private _getBackgroundJobRunning;
    private _checkWhetherProofGranularityJobRunning;
    updateIntegrationRun(runGr: GlideRecord, state: string, substate: string, notes: string, fatal_error_id?: string, fatal_error_message?: string, parameterRaw?: string, parameterDisplay?: string): void;
    updateIntegrationProcess(procGr: GlideRecord, state: string, notes?: string): void;
    addProcessRun(runGr: GlideRecord, parameters?: Record<string, any>): string;
    kickTimedOutIntegrationRuns(): void;
    cleanupOldProcessAttachments(): void;
    getIntegrationRunRecord(integrationProcessGr: GlideRecord): GlideRecord | null;
    retryProcesses(): void;
    retryCancelledProcesses(): void;
    private _logRetryCancelledProcess;
    private _retryCancelledProcess;
    private _checkProcessInRunning;
    retryErroredProcesses(): void;
    private _logRetryErrorProcess;
    private _retryErroredProcess;
    private _copyProcess;
    private _isValidSourceName;
    haltIntegrationRun(scopeId: string, runList: string): number;
    private _deleteIntegrationProcess;
    private _deleteQueueEntry;
    deleteIntegrationData(sourceName: string): void;
    mergeJSON(json: Record<string, any>, jsonContent: Record<string, any>): Record<string, any>;
    checkIfNeedsProcessing(integrationGr: GlideRecord): boolean;
    type(): string;
}
//# sourceMappingURL=VulnerabilityIntegrationUtils.d.ts.map