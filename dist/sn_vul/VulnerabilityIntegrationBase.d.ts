import { GlideRecord } from "../types/index.js";
export declare class VulnerabilityIntegrationBase {
    integrationGr: GlideRecord | null;
    integrationProcessGr: GlideRecord | null;
    sizeLimitExceeded: boolean;
    private _nextRunParams;
    private _hasMoreData;
    requiresMultipleCalls: boolean;
    shouldMakeCall: boolean;
    constructor();
    retrieveData(): {
        contents: string;
        contentType: string;
        extension: string;
    };
    hasMoreData(optBoolean?: boolean): boolean;
    finalizeRun(): boolean;
    deleteAttachments(tableName: string, recordSysId: string): void;
    getNextRunParameters(): any;
    setNextRunParameters(paramObject: any): void;
    private _getProcessParameters;
    private _getRunParameters;
    validateRetrievedData(result: any): boolean;
    validateAttachmentSize(report: any, process: any): void;
    skipRetryByScheduleJob(integrationProcessGr: GlideRecord): boolean;
    shouldRetry(process: any): boolean;
    getNextRetry(retry: string): number;
    getMaxRetry(): number;
    onDataProcessed(process: any, result: any): void;
    countDownloadedAttachmets(process: any): void;
    countProcesses(process: any): void;
    onImportQueueProcessed(process: any): void;
    countProcessedAttachment(process: any): void;
    private _updateIntegrationProcess;
    onProcessComplete(process: any): void;
    onRunWaitForComplete(integrationRun: any): void;
    private _checkInteRunComplete;
    private _checkInteRunError;
    private _updateIntegrationRun;
    private _calculateCount;
    isProcessStartedByFramework(process: any): boolean;
    validateXML(body: string, errorNodeName?: string): void;
    private _shouldAutoTruncate;
    private _getTruncationLimit;
    getStatusCodeMessage(statusCode: number, placeholder: string): string;
}
//# sourceMappingURL=VulnerabilityIntegrationBase.d.ts.map