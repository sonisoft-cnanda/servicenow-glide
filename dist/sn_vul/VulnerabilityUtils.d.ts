export declare class VulnerabilityUtils {
    DEFAULT_MSG_FOR_UNKNOWN_VUL: string;
    PAGE_SIZE: number;
    CLOSE_STATE: string;
    DEFER_STATE: string;
    AWAIT_IMPL: string;
    INVALID_CI_SUBSTATE: number;
    SOURCE: string;
    VulnerableSwDisMatchObj: any;
    SOLUTION_VENDOR_MAP: string[];
    constructor();
    initialize(): void;
    isSAMNVDOn(): boolean;
    getCIFilter(): string;
    getVulFilter(): string;
    createVulGroupFromFilter(filter: string): void;
    refreshVulnerableItemsforNVD(current: any): void;
    insertVulnerableItemForSAM(vulEntry: any, installationRecord: any): void;
    insertVulnerabilityVendorMappingData(vulID: string, scannerName: string, vendorName: string): void;
    _checkAndInsertVendorMappings(vul: any, scannerName: string, vendorName: string): void;
    _insertVulnerabilityVendorMappingData(vulID: string, vendorName: string): void;
    refreshVulnerableItems(current: any): void;
    refreshAllVulnerableItemsWithSettings(current: any): void;
    _refreshVulnerableItems(current: any): void;
    refreshVIAfterNVDImport(): void;
    insertVulnerableItems(installRecord: any): void;
    createVISoftwareExp(sysId: string): void;
    _getExposureViCount(softExp: any): number;
    _createM2MExpVul(swExp: any, vulnEntry: any): void;
    _createM2MExpVulItem(swExp: any, vulItem: any): void;
    _insertVulnerableItem(vulnEntry: any, installationRecord: any, sw_vulnerability: any): void;
    closeViOnExpDelete(): void;
    updateVulnerableItemsFromInstall(installRecord: any): void;
    findCIByNetworkDetails(current: any): void;
    createTaskFromVulGroup(multiVulGrpGr: any, targetTable: string, parent: any): void;
    createTaskFromVulnerabilities(multiVulnerableItemGr: any, targetTable: string, parent: any): void;
    _createTaskFromVulItemOrGrp(multiVGr: any, targetTable: string, sourceTable: string, parent: any): void;
    createSIFromVulnerability(vulItemOrGroup: any, parent: any): void;
    createProblemFromVulnerability(vulItemOrGroup: any, parent: any): void;
    createChangeFromVulnerability(vulItemOrGroup: any, parent: any): void;
    canShowCreateChangeButton(vulnerabilityGroupGr: any): boolean;
    vulnerableItemsPresent(vulnerabilityGroupGr: any): boolean;
    setEffectedCIs(to: any, effectedCIs: any): void;
    setAffectedCIsByTaskId(taskId: string, affectedCIs: any): void;
    addVulnerableItemToTask(taskId: string, vulItemId: string): void;
    _isValidTask(taskId: string, iteration: number): boolean;
    addVulItemCiToTaskForGroup(taskId: string, vulGroupId: string): void;
    addToM2mVgChange(taskId: string, vulGroupId: string): void;
    _isVulItemValid(vItem: any): boolean;
    actionSplitGroup(splitActionRecord: any, callFromDataBroker: boolean): void;
    actionSplitGroupAsynch(splitActionRecord: any): void;
    _duplicateGroup(vulGroupId: string, short_desc: string, vulAction: any): void;
    _moveSelectedVIs(vulGroupId: string, query: string, newVulGroupId: string, limit: number, vulAction: any): void;
    checkForRollup(grVG: any): void;
    _getUniqueCiCount(vulGroupId: string): number;
    reopenVulnerability(vItem: any): void;
    reopenVulnerableItem(vItem: any, doNotUpdate: boolean, isManuallyReopened: boolean): void;
    resetChangeApproval(vItem: any, changeApprovalIds: any, grVCAforCompensatingControl: any): void;
    resetChangeApprovalForWorkFlow(vItem: any): void;
    cancelApproval(changeApprovalIds: any): void;
    generateClickThroughURL(record: any, extra: any): string;
    runScheduledRefreshNonVGRGroup(): void;
    runScheduledRefreshNonAppVGRGroup(): void;
    getCredentialList(integrationID: string): any[];
    getRiskRatingFromRiskScore(rs: number, type: string): string;
    updateEmtpyRiskRatings(low: number, high: number): void;
    _getMatchingVICount(encodedQuery: string): number;
    _runBatchUpdate(vi: any, column: string, value: any): void;
    _runBatchingQuery(encodedQuery: string, previousVINumber: number): any;
    updateClosedWithEmptyTTRStatus(): void;
    updateEmptyTTRsToNoTarget(): void;
    updateClosedToTargetMet(): void;
    getCIManagers(): any[];
    countVIs(): number;
    countforVRasync(specificVulId: string): number;
    countVIUsingManifest(specificVulId: string, start: number, end: number): number;
    countAVIUsingManifest(specificVulId: string, start: number, end: number): number;
    countVRUsingManifest(specificVulId: string, start: number, end: number): number;
    countforVR(specificVulId: string): number;
    countforVG(specificVGId: string, workflow: any): number;
    countforAppVG(specificVGId: string, workflow: any): number;
    _getSubstateCount(groupId: string, VG: any): number;
    resetCountsOnVG(group: any): void;
    enableConfigAndVulSoft(): void;
    getPerformanceMetrics(runGr: any, excludeProcessList: any[]): any;
    _isVIIntegrationRun(runGr: any): boolean;
    _getOpenDetectionCount(runGr: any): number;
    populateStats(runGr: any, key: string, value: any): void;
    getPerformanceMetricsForProcess(processGr: any): any;
    _hasInvalidCI(vItem: any): boolean;
    _hasIncorrectCI(vItem: any): boolean;
    _hasDecommissionedCI(vItem: any): boolean;
    lookupVI(viKey: string, fieldsMap: any, integrationInstance: any): any;
    shouldShowVICount(): boolean;
    showVICountOnWorkspace(): void;
    showAVITCountOnWorkspace(): void;
    showCVITCountOnWorkspace(): void;
    showTRCountOnWorkspace(): void;
    updateStateToReadyState(splitActionRecord: any): void;
    createvulnerableitem(vulnerability: any, sysIds: any): void;
    setWorkflowForCVIT(cVITGr: any): void;
    _insertVulnerableItemVulnerabilityAssessment(vulnEntry: any, cmdbCi: any): void;
    getChangeApprovalGrForCompensatingControl(vulRecord: any): any;
    getChangeApprovalIds(vItem: any, grVCACompensatingControl: any): any;
    _formatMessage(message: string, placeholder: string): string;
    getStatusCodeMessage(statusCode: number, placeholder: string): string;
}
//# sourceMappingURL=VulnerabilityUtils.d.ts.map