"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.VulnerabilityIntegrationUtils = void 0;
const GlideRecord_1 = require("../imports/GlideRecord.js");
class VulnerabilityIntegrationUtils {
    constructor() {
        this._MAX_PROC_TIME_S = 3600; // 60 min.
        this._MAX_RETRIES = 5; // number of times to retry jobs that are cancelled because of a timeout
    }
    addIntegrationRun(integrationGr, optInitialState) {
        return '';
    }
    _checkWhetherToRun(integrationGr) {
        return null;
    }
    _checkExistingRunInReady(integrationGr) {
        return false;
    }
    shouldStartIntegrationRun(integrationRunGr) {
        return false;
    }
    markProcessAsTimeOut(integrations, agentcorrelatorMap, timeOut) { }
    _handleLongRunningProcess(correlators, rangeStarting, timeOut) { }
    getNextIntegrationRun(integrationSysId) {
        return null;
    }
    _isThirdPartyEntryIntegration(integrationGr) {
        return false;
    }
    onIntegrationRunComplete(integrationRun) { }
    _processThirdPartyEntryImport(domain, start, end) { }
    processSolutionImport(domain, source, start, end) { }
    startIntegrationRun(runGr) {
        return '';
    }
    _getBackgroundJobRunning(jobList) {
        return null;
    }
    _checkWhetherProofGranularityJobRunning() {
        return false;
    }
    updateIntegrationRun(runGr, state, substate, notes, fatal_error_id, fatal_error_message, parameterRaw, parameterDisplay) { }
    updateIntegrationProcess(procGr, state, notes) { }
    addProcessRun(runGr, parameters) {
        return '';
    }
    kickTimedOutIntegrationRuns() { }
    cleanupOldProcessAttachments() { }
    getIntegrationRunRecord(integrationProcessGr) {
        return null;
    }
    retryProcesses() { }
    retryCancelledProcesses() { }
    _logRetryCancelledProcess(intProcGr) { }
    _retryCancelledProcess(intProcGr) { }
    _checkProcessInRunning(process) {
        return false;
    }
    retryErroredProcesses() { }
    _logRetryErrorProcess(intProcGr) { }
    _retryErroredProcess(intProcGr) { }
    _copyProcess(intProcGr, isProcessErrored) {
        return new GlideRecord_1.GlideRecord('');
    }
    _isValidSourceName(sourceName) {
        return false;
    }
    haltIntegrationRun(scopeId, runList) {
        return 0;
    }
    _deleteIntegrationProcess(integrationRunList) {
        return [];
    }
    _deleteQueueEntry(integrationProcessList) { }
    deleteIntegrationData(sourceName) { }
    mergeJSON(json, jsonContent) {
        return {};
    }
    checkIfNeedsProcessing(integrationGr) {
        return false;
    }
    type() {
        return 'VulnerabilityIntegrationUtils';
    }
}
exports.VulnerabilityIntegrationUtils = VulnerabilityIntegrationUtils;
//# sourceMappingURL=VulnerabilityIntegrationUtils.js.map